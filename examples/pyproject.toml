[tool.poetry]
name = "nexus-examples"
version = "2.0.0"
description = "Example applications demonstrating Nexus Framework capabilities"
authors = ["Nexus Team <team@nexus-framework.dev>"]
license = "MIT"
readme = "README.md"
homepage = "https://nexus-framework.dev/examples"
repository = "https://github.com/nexus-framework/nexus/tree/main/examples"
documentation = "https://docs.nexus-framework.dev/examples"
keywords = [
    "nexus-framework",
    "examples",
    "tutorial",
    "demo",
    "sample-code"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Software Development :: Libraries :: Application Frameworks"
]
packages = [
    { include = "examples" }
]
include = [
    "*.py",
    "README.md",
    "config/**/*",
    "static/**/*",
    "templates/**/*"
]

[tool.poetry.dependencies]
python = "^3.11"

# Core Framework (assuming local installation)
# Install from parent directory: pip install -e ..
# nexus-framework = { path = "..", develop = true }

# WebSocket Support (for Notification Plugin)
websockets = "^12.0"
python-socketio = "^5.11.0"

# File Storage Support
aiofiles = "^23.2.1"
python-magic = "^0.4.27"

# Analytics and Monitoring
prometheus-client = "^0.19.0"

# Redis for caching and session storage
redis = "^5.0.1"

# Background Tasks
apscheduler = "^3.10.4"

# Additional utilities
python-dateutil = "^2.8.2"
pytz = "^2023.3.post1"

# HTTP Client for testing
httpx = "^0.26.0"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.4.4"
pytest-asyncio = "^0.23.3"
pytest-cov = "^4.1.0"
httpie = "^3.2.2"
locust = "^2.20.0"

# Code Quality
black = "^23.12.1"
isort = "^5.13.2"
flake8 = "^7.0.0"
mypy = "^1.8.0"

# Development Tools
ipython = "^8.19.0"
rich = "^13.7.0"
watchdog = "^3.0.0"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
# Documentation serving
mkdocs = "^1.5.3"
mkdocs-material = "^9.5.3"

[tool.poetry.group.database]
optional = true

[tool.poetry.group.database.dependencies]
# Database drivers (choose based on your needs)
asyncpg = { version = "^0.29.0", optional = true }  # PostgreSQL
aiomysql = { version = "^0.2.0", optional = true }  # MySQL
motor = { version = "^3.3.2", optional = true }     # MongoDB

[tool.poetry.extras]
postgresql = ["asyncpg"]
mysql = ["aiomysql"]
mongodb = ["motor"]
all-databases = ["asyncpg", "aiomysql", "motor"]
docs = ["mkdocs", "mkdocs-material"]
testing = ["pytest", "pytest-asyncio", "pytest-cov", "httpie", "locust"]

[tool.poetry.scripts]
nexus-example = "complete_app:main"
nexus-example-test = "tests.run_tests:main"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

# Tool Configurations

[tool.black]
line-length = 100
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.venv
  | build
  | dist
  | __pycache__
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.11"
namespace_packages = true
show_error_codes = true
pretty = true
exclude = [
    "tests/",
    "build/",
    "dist/"
]

[[tool.mypy.overrides]]
module = [
    "socketio.*",
    "websockets.*",
    "apscheduler.*",
    "locust.*",
    "httpie.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--asyncio-mode=auto"
]
markers = [
    "example: Example tests",
    "integration: Integration tests",
    "slow: Slow tests",
    "requires_redis: Tests that require Redis"
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod"
]

[tool.ruff]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C",   # flake8-comprehensions
    "B",   # flake8-bugbear
]
ignore = [
    "E501",  # line too long
    "B008",  # do not perform function calls in argument defaults
]
line-length = 100
target-version = "py311"
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv"
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
