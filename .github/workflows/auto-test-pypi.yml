name: Auto Test PyPI Publish

on:
  push:
    branches:
      - master
      - develop
      - feature/*
  pull_request:
    branches:
      - master
      - develop
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  auto-publish:
    name: Build and Publish to Test PyPI
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.action == 'opened'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run quick tests
        run: |
          poetry run pytest tests/ -x --tb=short || echo "Some tests failed, but continuing with build"

      - name: Generate test version
        id: version
        run: |
          BASE_VERSION=$(poetry version --short)
          TIMESTAMP=$(date +%Y%m%d%H%M%S)

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            VERSION_SUFFIX="pr${{ github.event.number }}"
          elif [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            VERSION_SUFFIX="dev"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            VERSION_SUFFIX="alpha"
          else
            BRANCH_NAME=$(echo "${{ github.ref }}" | sed 's/refs\/heads\///' | sed 's/[^a-zA-Z0-9]//g' | head -c 10)
            VERSION_SUFFIX="feature.${BRANCH_NAME}"
          fi

          TEST_VERSION="${BASE_VERSION}.${VERSION_SUFFIX}.${TIMESTAMP}"

          echo "version=$TEST_VERSION" >> $GITHUB_OUTPUT
          echo "📦 Generated test version: $TEST_VERSION"

      - name: Update version for test build
        run: |
          poetry version "${{ steps.version.outputs.version }}"
          echo "Updated pyproject.toml version to: $(poetry version --short)"

      - name: Build package
        run: |
          poetry build
          echo "📦 Build completed:"
          ls -la dist/

      - name: Configure Test PyPI
        run: |
          poetry config repositories.testpypi https://test.pypi.org/legacy/
          poetry config pypi-token.testpypi ${{ secrets.PYPI_TEST_TOKEN }}

      - name: Publish to Test PyPI
        run: |
          echo "🚀 Publishing to Test PyPI..."
          poetry publish -r testpypi
          echo "✅ Successfully published nexus-platform version ${{ steps.version.outputs.version }} to Test PyPI!"

      - name: Test installation
        run: |
          echo "🔍 Testing installation from Test PyPI..."
          sleep 30  # Wait for Test PyPI to process

          # Create fresh environment and test install
          python -m venv test_install
          source test_install/bin/activate

          pip install -i https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ "nexus-platform==${{ steps.version.outputs.version }}" || {
            echo "❌ Installation failed, but package was published"
            exit 0
          }

          python -c "import nexus; print('✅ Package imported successfully')" || {
            echo "❌ Import failed, but package was published"
            exit 0
          }

          echo "✅ Installation test completed"

      - name: Create summary
        if: always()
        run: |
          echo "## 🚀 Test PyPI Auto-Publish Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Package:** nexus-platform" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📥 Installation Command" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "pip install -i https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ nexus-platform==${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Test PyPI URL:** https://test.pypi.org/project/nexus-platform/${{ steps.version.outputs.version }}/" >> $GITHUB_STEP_SUMMARY

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## 🚀 Test Package Published

            **Version:** \`${{ steps.version.outputs.version }}\`

            ### Install for testing:
            \`\`\`bash
            pip install -i https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ nexus-platform==${{ steps.version.outputs.version }}
            \`\`\`

            [View on Test PyPI](https://test.pypi.org/project/nexus-platform/${{ steps.version.outputs.version }}/)`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
