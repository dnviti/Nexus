name: Test PyPI Publish

on:
  push:
    branches:
      - master
      - develop
      - feature/*
  pull_request:
    branches:
      - master
      - develop
  workflow_dispatch:
    inputs:
      version_suffix:
        description: 'Version suffix (e.g., dev1, alpha1, beta1)'
        required: false
        type: string
        default: 'dev'

env:
  PYTHON_VERSION: "3.11"

jobs:
  test-and-build:
    name: Test and Build Package
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      package_name: ${{ steps.version.outputs.package_name }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --with dev,test

    - name: Run tests
      run: |
        poetry run pytest \
          --cov=nexus \
          --cov-branch \
          --cov-report=term-missing \
          --cov-report=xml \
          --cov-fail-under=60

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

    - name: Run linting
      run: |
        poetry run black --check .
        poetry run isort --check-only .
        poetry run flake8

    - name: Generate test version
      id: version
      run: |
        BASE_VERSION=$(poetry version --short)
        TIMESTAMP=$(date +%Y%m%d%H%M%S)

        if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.version_suffix }}" ]]; then
          VERSION_SUFFIX="${{ github.event.inputs.version_suffix }}"
        elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
          VERSION_SUFFIX="pr${{ github.event.number }}"
        elif [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
          VERSION_SUFFIX="dev"
        elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          VERSION_SUFFIX="dev"
        else
          BRANCH_NAME=$(echo "${{ github.ref }}" | sed 's/refs\/heads\///' | sed 's/[^a-zA-Z0-9]//g')
          VERSION_SUFFIX="dev.${BRANCH_NAME}"
        fi

        TEST_VERSION="${BASE_VERSION}.${VERSION_SUFFIX}.${TIMESTAMP}"
        PACKAGE_NAME="nexus-platform"

        echo "version=$TEST_VERSION" >> $GITHUB_OUTPUT
        echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
        echo "Base Version: $BASE_VERSION"
        echo "Test Version: $TEST_VERSION"
        echo "Package Name: $PACKAGE_NAME"

    - name: Update version for test release
      run: |
        poetry version "${{ steps.version.outputs.version }}"

    - name: Build package
      run: poetry build

    - name: Validate package
      run: |
        poetry run pip install twine
        poetry run twine check dist/*

    - name: List build artifacts
      run: |
        echo "Build artifacts:"
        ls -la dist/
        echo ""
        echo "Package contents:"
        poetry run python -c "
        import zipfile
        import os
        for file in os.listdir('dist/'):
            if file.endswith('.whl'):
                print(f'Contents of {file}:')
                with zipfile.ZipFile(f'dist/{file}', 'r') as z:
                    for name in sorted(z.namelist()):
                        print(f'  {name}')
                break
        "

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: test-package-${{ github.run_number }}
        path: |
          dist/
          pyproject.toml
        retention-days: 7

  publish-test-pypi:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.event_name != 'pull_request' || (github.event_name == 'pull_request' && github.event.action == 'opened')
    environment: test-pypi

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: test-package-${{ github.run_number }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Configure Test PyPI
      run: |
        poetry config repositories.testpypi https://test.pypi.org/legacy/
        poetry config pypi-token.testpypi ${{ secrets.PYPI_TEST_TOKEN }}

    - name: Publish to Test PyPI
      run: |
        echo "Publishing ${{ needs.test-and-build.outputs.package_name }} version ${{ needs.test-and-build.outputs.version }} to Test PyPI..."
        poetry publish -r testpypi
        echo "‚úÖ Successfully published to Test PyPI!"

    - name: Verify publication
      run: |
        echo "Waiting for package to be available on Test PyPI..."
        sleep 30

        # Try to install from Test PyPI with main PyPI as fallback for dependencies
        pip install -i https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ "${{ needs.test-and-build.outputs.package_name }}==${{ needs.test-and-build.outputs.version }}" || true

        echo "‚úÖ Package verification completed"

  test-installation:
    name: Test Installation
    runs-on: ${{ matrix.os }}
    needs: [test-and-build, publish-test-pypi]
    if: needs.publish-test-pypi.result == 'success'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11", "3.12"]
      fail-fast: false

    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Wait for Test PyPI propagation
      run: |
        echo "Waiting for Test PyPI to propagate..."
        sleep 60

    - name: Test installation from Test PyPI
      run: |
        echo "Testing installation on ${{ matrix.os }} with Python ${{ matrix.python-version }}"

        # Create a virtual environment
        python -m venv test_env

        # Activate virtual environment (OS-specific)
        if [ "${{ runner.os }}" = "Windows" ]; then
          source test_env/Scripts/activate
        else
          source test_env/bin/activate
        fi

        # Install package from Test PyPI
        pip install -i https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ "${{ needs.test-and-build.outputs.package_name }}==${{ needs.test-and-build.outputs.version }}"

        # Test basic functionality
        python -c "
        try:
            import nexus
            print(f'‚úÖ Successfully imported nexus')
            print(f'Version: {getattr(nexus, \"__version__\", \"unknown\")}')
        except ImportError as e:
            print(f'‚ùå Failed to import nexus: {e}')
            exit(1)
        "

        # Test CLI if available
        if command -v nexus >/dev/null 2>&1; then
          echo "Testing CLI..."
          nexus --help || echo "CLI help failed, but that's okay for testing"
        else
          echo "CLI not available in PATH"
        fi

        echo "‚úÖ Installation test completed successfully on ${{ matrix.os }}"
      shell: bash

  cleanup-old-versions:
    name: Cleanup Old Test Versions
    runs-on: ubuntu-latest
    needs: [test-installation]
    if: always() && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop')

    steps:
    - name: Cleanup notification
      run: |
        echo "üßπ Note: Consider manually cleaning up old test versions from Test PyPI"
        echo "Package: ${{ needs.test-and-build.outputs.package_name }}"
        echo "Current version: ${{ needs.test-and-build.outputs.version }}"
        echo ""
        echo "Test PyPI does not provide automated cleanup, so old versions accumulate."
        echo "You may want to periodically review and manage test versions manually."

  summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [test-and-build, publish-test-pypi, test-installation]
    if: always()

    steps:
    - name: Create summary
      run: |
        echo "## Test PyPI Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Package:** ${{ needs.test-and-build.outputs.package_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ needs.test-and-build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch/PR:** ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [[ "${{ needs.publish-test-pypi.result }}" == "success" ]]; then
          echo "### ‚úÖ Successfully Published to Test PyPI" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Installation command:**" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "pip install -i https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ ${{ needs.test-and-build.outputs.package_name }}==${{ needs.test-and-build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Test PyPI URL:** https://test.pypi.org/project/${{ needs.test-and-build.outputs.package_name }}/${{ needs.test-and-build.outputs.version }}/" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ‚ùå Failed to Publish to Test PyPI" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Results:" >> $GITHUB_STEP_SUMMARY
        echo "- **Build & Test:** ${{ needs.test-and-build.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Publish:** ${{ needs.publish-test-pypi.result == 'success' && '‚úÖ Passed' || needs.publish-test-pypi.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Installation Test:** ${{ needs.test-installation.result == 'success' && '‚úÖ Passed' || needs.test-installation.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY

    - name: Post comment on PR
      if: github.event_name == 'pull_request' && needs.publish-test-pypi.result == 'success'
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `## üöÄ Test PyPI Package Published

**Package:** \`${{ needs.test-and-build.outputs.package_name }}\`
**Version:** \`${{ needs.test-and-build.outputs.version }}\`

### Installation for Testing
\`\`\`bash
pip install -i https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ ${{ needs.test-and-build.outputs.package_name }}==${{ needs.test-and-build.outputs.version }}
\`\`\`

### Test PyPI Link
https://test.pypi.org/project/${{ needs.test-and-build.outputs.package_name }}/${{ needs.test-and-build.outputs.version }}/

> This is an automated test deployment. The package will be available for testing but should not be used in production.`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
