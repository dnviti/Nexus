name: Documentation

on:
  push:
    branches: [master, develop]
    paths:
      - "docs/**"
      - "README.md"
      - "CONTRIBUTING.md"
      - ".github/workflows/docs.yml"
      - "nexus/**"
  pull_request:
    branches: [master, develop]
    paths:
      - "docs/**"
      - "README.md"
      - "CONTRIBUTING.md"
  workflow_dispatch:
  repository_dispatch:
    types: [docs-update]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  PYTHON_VERSION: "3.11"

jobs:
  validate-docs:
    name: Validate Documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for broken links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: "yes"
          use-verbose-mode: "yes"
          config-file: ".github/markdown-link-check.json"
          folder-path: "docs/"

      - name: Validate Mermaid diagrams
        run: |
          # Check if all mermaid diagrams are properly formatted
          find docs -name "*.md" -exec grep -l "```mermaid" {} \; | while read file; do
            echo "Checking Mermaid diagrams in $file"
            # Basic syntax check - ensure mermaid blocks are closed
            if ! grep -Pzo '```mermaid\n.*?\n```' "$file" > /dev/null; then
              echo "Warning: Potential Mermaid syntax issue in $file"
            fi
          done

      - name: Check documentation completeness
        run: |
          # Ensure all sections have content
          required_files=(
            "docs/README.md"
            "docs/getting-started/README.md"
            "docs/getting-started/installation.md"
            "docs/getting-started/quickstart.md"
            "docs/getting-started/first-plugin.md"
            "docs/getting-started/configuration.md"
            "docs/architecture/README.md"
            "docs/architecture/overview.md"
            "docs/plugins/README.md"
          )

          missing_files=()
          incomplete_files=()

          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              missing_files+=("$file")
            elif [[ $(wc -l < "$file") -lt 10 ]]; then
              incomplete_files+=("$file")
            fi
          done

          if [[ ${#missing_files[@]} -gt 0 ]]; then
            echo "❌ Missing required documentation files:"
            printf '%s\n' "${missing_files[@]}"
            echo "Creating placeholder files..."
            for file in "${missing_files[@]}"; do
              mkdir -p "$(dirname "$file")"
              echo "# $(basename "$file" .md | tr '-' ' ' | sed 's/\b\w/\U&/g')" > "$file"
              echo "" >> "$file"
              echo "Documentation coming soon." >> "$file"
            done
          fi

          if [[ ${#incomplete_files[@]} -gt 0 ]]; then
            echo "⚠️  Documentation files that may be incomplete:"
            printf '%s\n' "${incomplete_files[@]}"
          fi

          echo "✅ Documentation completeness check completed"

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: validate-docs

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-docs-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --with docs
          poetry run pip install mkdocs mkdocs-material mkdocstrings[python] mkdocs-mermaid2-plugin mkdocs-git-revision-date-localized-plugin

      - name: Install project
        run: poetry install --no-interaction

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3

      - name: Create MkDocs configuration
        run: |
          cat > mkdocs.yml << 'EOF'
          site_name: Nexus Documentation
          site_description: The Ultimate Plugin-Based Application Platform
          site_url: ${{ steps.pages.outputs.base_url }}
          repo_url: https://github.com/${{ github.repository }}
          repo_name: ${{ github.repository }}
          edit_uri: edit/master/

          theme:
            name: material
            custom_dir: docs/overrides
            palette:
              - media: "(prefers-color-scheme: light)"
                scheme: default
                primary: blue
                accent: blue
                toggle:
                  icon: material/brightness-7
                  name: Switch to dark mode
              - media: "(prefers-color-scheme: dark)"
                scheme: slate
                primary: blue
                accent: blue
                toggle:
                  icon: material/brightness-4
                  name: Switch to light mode
            features:
              - navigation.tabs
              - navigation.sections
              - navigation.expand
              - navigation.top
              - navigation.tracking
              - search.highlight
              - search.share
              - search.suggest
              - content.code.copy
              - content.code.annotate
              - content.action.edit
              - content.action.view
              - content.tabs.link
              - toc.follow
              - toc.integrate
            logo: assets/logo.png
            favicon: assets/favicon.ico
            icon:
              repo: fontawesome/brands/github

          markdown_extensions:
            - pymdownx.highlight:
                anchor_linenums: true
                line_spans: __span
                pygments_lang_class: true
            - pymdownx.inlinehilite
            - pymdownx.snippets:
                base_path: [docs]
            - pymdownx.superfences:
                custom_fences:
                  - name: mermaid
                    class: mermaid
                    format: !!python/name:pymdownx.superfences.fence_code_format
            - pymdownx.tabbed:
                alternate_style: true
            - pymdownx.tasklist:
                custom_checkbox: true
            - pymdownx.emoji:
                emoji_index: !!python/name:materialx.emoji.twemoji
                emoji_generator: !!python/name:materialx.emoji.to_svg
            - admonition
            - pymdownx.details
            - attr_list
            - md_in_html
            - def_list
            - footnotes
            - tables
            - toc:
                permalink: true
                title: On this page

          plugins:
            - search:
                lang: en
            - git-revision-date-localized:
                type: date
                enable_creation_date: true
            - mermaid2:
                arguments:
                  theme: |
                    ^(JSON.parse(__md_get_color_scheme()) === "slate") ? "dark" : "light"

          nav:
            - Home: index.md
            - Getting Started:
                - getting-started/index.md
                - Installation: getting-started/installation.md
                - Quick Start: getting-started/quickstart.md
                - First Plugin: getting-started/first-plugin.md
                - Configuration: getting-started/configuration.md
            - Architecture:
                - architecture/index.md
                - Overview: architecture/overview.md
                - Plugin System: architecture/plugin-system.md
                - Event Bus: architecture/event-bus.md
                - Service Registry: architecture/service-registry.md
            - Plugin Development:
                - plugins/index.md
                - Basics: plugins/basics.md
                - API Routes: plugins/api-routes.md
                - Database Integration: plugins/database.md
                - Event Handling: plugins/events.md
                - Testing: plugins/testing.md
            - API Reference:
                - api/index.md
                - Core: api/core.md
                - Plugin Manager: api/plugin-manager.md
                - Event Bus: api/event-bus.md
                - Service Registry: api/service-registry.md
            - Deployment:
                - deployment/index.md
                - Docker: deployment/docker.md
                - Production: deployment/production.md
                - Monitoring: deployment/monitoring.md
            - Guides:
                - guides/index.md
                - Best Practices: guides/best-practices.md
                - Troubleshooting: guides/troubleshooting.md
                - Examples: guides/examples.md
            - Contributing: CONTRIBUTING.md
            - Changelog: CHANGELOG.md

          extra:
            social:
              - icon: fontawesome/brands/github
                link: https://github.com/${{ github.repository }}
              - icon: fontawesome/brands/python
                link: https://pypi.org/project/nexus-platform/
              - icon: fontawesome/brands/docker
                link: https://ghcr.io/${{ github.repository }}
            version:
              provider: mike
              default: stable
            analytics:
              provider: google
              property: !ENV [GOOGLE_ANALYTICS_KEY, ""]

          extra_css:
            - stylesheets/extra.css

          extra_javascript:
            - javascripts/extra.js

          watch:
            - nexus/
          EOF

      - name: Create documentation structure
        run: |
          # Create docs root index from README
          cp README.md docs/index.md

          # Update relative links in index
          sed -i 's|docs/||g' docs/index.md

          # Create missing directories
          mkdir -p docs/{assets,stylesheets,javascripts,overrides}

          # Create section indexes by copying README.md files or creating placeholders
          sections=("getting-started" "architecture" "plugins" "api" "deployment" "guides")

          for section in "${sections[@]}"; do
            mkdir -p "docs/$section"
            if [[ -f "docs/$section/README.md" ]]; then
              cp "docs/$section/README.md" "docs/$section/index.md"
            else
              cat > "docs/$section/index.md" << EOF
          # $(echo $section | tr '-' ' ' | sed 's/\b\w/\U&/g')

          Welcome to the $(echo $section | tr '-' ' ') section.

          ## Overview

          This section covers important topics related to $(echo $section | tr '-' ' ').

          ## Topics

          - Coming soon...

          ## Next Steps

          Check out the specific guides in this section for detailed information.
          EOF
            fi
          done

      - name: Create custom CSS
        run: |
          cat > docs/stylesheets/extra.css << 'EOF'
          :root {
            --md-primary-fg-color: #2563eb;
            --md-primary-fg-color--light: #3b82f6;
            --md-primary-fg-color--dark: #1d4ed8;
          }

          .md-header {
            background: linear-gradient(135deg, var(--md-primary-fg-color), var(--md-primary-fg-color--light));
          }

          .md-typeset h1 {
            color: var(--md-primary-fg-color);
            border-bottom: 2px solid var(--md-primary-fg-color--light);
            padding-bottom: 0.5rem;
          }

          .md-typeset .admonition.note {
            border-color: var(--md-primary-fg-color);
          }

          .md-typeset .admonition.note > .admonition-title {
            background-color: var(--md-primary-fg-color--light);
          }

          /* Custom styling for code blocks */
          .md-typeset pre > code {
            font-size: 0.85rem;
          }

          /* Plugin showcase styling */
          .plugin-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1rem;
            margin: 1rem 0;
          }

          .plugin-card {
            border: 1px solid var(--md-default-fg-color--lightest);
            border-radius: 0.5rem;
            padding: 1rem;
            background: var(--md-code-bg-color);
          }
          EOF

      - name: Create custom JavaScript
        run: |
          cat > docs/javascripts/extra.js << 'EOF'
          // Add custom analytics or interactive features here
          document.addEventListener('DOMContentLoaded', function() {
            // Add copy button functionality enhancement
            const codeBlocks = document.querySelectorAll('pre code');

            codeBlocks.forEach(function(codeBlock) {
              const button = codeBlock.parentNode.querySelector('.md-clipboard');
              if (button) {
                button.addEventListener('click', function() {
                  // Show feedback
                  const originalTitle = button.title;
                  button.title = 'Copied!';
                  setTimeout(() => {
                    button.title = originalTitle;
                  }, 2000);
                });
              }
            });
          });
          EOF

      - name: Generate API documentation
        run: |
          poetry run python -c "
          import os
          import inspect
          import importlib.util

          # Auto-generate API documentation from docstrings
          def generate_api_docs():
              api_dir = 'docs/api'
              os.makedirs(api_dir, exist_ok=True)

              # This is a placeholder - in a real implementation,
              # you would scan the nexus package and generate docs
              modules = ['core', 'plugin-manager', 'event-bus', 'service-registry']

              for module in modules:
                  with open(f'{api_dir}/{module}.md', 'w') as f:
                      f.write(f'# {module.replace(\"-\", \" \").title()}\\n\\n')
                      f.write(f'API documentation for {module}.\\n\\n')
                      f.write('## Classes\\n\\n')
                      f.write('Documentation coming soon.\\n\\n')
                      f.write('## Functions\\n\\n')
                      f.write('Documentation coming soon.\\n')

          generate_api_docs()
          print('✅ Generated API documentation')
          "

      - name: Build documentation
        run: |
          poetry run mkdocs build --strict

          # Check for any build warnings or errors
          if [[ -f site/404.html ]]; then
            echo "✅ Documentation built successfully"
            echo "📊 Site statistics:"
            find site -name "*.html" | wc -l | xargs echo "HTML pages:"
            find site -name "*.css" | wc -l | xargs echo "CSS files:"
            find site -name "*.js" | wc -l | xargs echo "JS files:"
            du -sh site/ | cut -f1 | xargs echo "Total size:"
          else
            echo "❌ Documentation build may have failed"
            exit 1
          fi

      - name: Test documentation
        run: |
          # Basic tests for the built documentation
          echo "🧪 Testing built documentation..."

          # Check if main pages exist
          required_pages=("index.html" "getting-started/index.html" "architecture/index.html")
          for page in "${required_pages[@]}"; do
            if [[ ! -f "site/$page" ]]; then
              echo "❌ Missing required page: $page"
              exit 1
            fi
          done

          # Check for broken internal links (basic check)
          if command -v htmlproofer >/dev/null 2>&1; then
            htmlproofer site/ --disable-external --check-html --check-img-http
          else
            echo "ℹ️  htmlproofer not available, skipping link validation"
          fi

          echo "✅ Documentation tests passed"

      - name: Upload documentation artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: site/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation-${{ github.run_number }}
          path: |
            site/
            mkdocs.yml
          retention-days: 30

  deploy:
    name: Deploy to GitHub Pages
    needs: [validate-docs, build-docs]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

      - name: Update deployment status
        run: |
          echo "## 📚 Documentation Deployed Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Site URL:** ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "- View the [deployed documentation](${{ steps.deployment.outputs.page_url }})" >> $GITHUB_STEP_SUMMARY
          echo "- Share the link with your team" >> $GITHUB_STEP_SUMMARY
          echo "- Continue improving the docs by editing files in the \`docs/\` directory" >> $GITHUB_STEP_SUMMARY

  notify:
    name: Documentation Status
    runs-on: ubuntu-latest
    needs: [validate-docs, build-docs, deploy]
    if: always()

    steps:
      - name: Create status summary
        run: |
          echo "## 📖 Documentation Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Job Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Validation:** ${{ needs.validate-docs.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build:** ${{ needs.build-docs.result == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy:** ${{ needs.deploy.result == 'success' && '✅ Deployed' || needs.deploy.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY

      - name: Check workflow status
        run: |
          if [[ "${{ needs.validate-docs.result }}" == "failure" || "${{ needs.build-docs.result }}" == "failure" ]]; then
            echo "❌ Documentation workflow failed"
            exit 1
          else
            echo "✅ Documentation workflow completed successfully"
          fi
