name: Documentation

on:
    push:
        branches: [develop]
        paths:
            - "docs/**"
            - "README.md"
            - "CONTRIBUTING.md"
            - "nexus/**"
            - "mkdocs*.yml"
            - ".github/workflows/docs.yml"

        tags:
            - "v*.*.*"
    pull_request:
        branches: [main, develop]
        paths:
            - "docs/**"
            - "README.md"
            - "CONTRIBUTING.md"
            - "nexus/**"
            - "mkdocs*.yml"
            - ".github/workflows/docs.yml"

    workflow_dispatch:

env:
    PYTHON_VERSION: "3.11"

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
    group: "pages"
    cancel-in-progress: false

jobs:
    docs-tag:
        name: Build and Deploy Tagged Version Documentation
        runs-on: ubuntu-latest
        if: startsWith(github.ref, 'refs/tags/v') && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        permissions:
            contents: read
            pages: write
            id-token: write
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Extract version from tag
              id: version
              run: |
                  VERSION=${GITHUB_REF#refs/tags/}
                  echo "version=${VERSION}" >> $GITHUB_OUTPUT
                  echo "Building documentation for version: ${VERSION}"

            - name: Setup Python
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Setup Pages
              uses: actions/configure-pages@v5

            - name: Install Poetry
              uses: snok/install-poetry@v1
              with:
                  version: latest
                  virtualenvs-create: true
                  virtualenvs-in-project: true
                  installer-parallel: true

            - name: Install dependencies
              run: poetry install --no-interaction --with docs

            - name: Build documentation
              run: |
                  VERSION="${{ steps.version.outputs.version }}"
                  echo "Building documentation for version: ${VERSION}"
                  poetry run mkdocs build --strict --verbose -f mkdocs.yml

            - name: Deploy built documentation
              run: |
                  echo "Documentation built successfully for ${VERSION}"

            - name: Upload Pages artifact
              uses: actions/upload-pages-artifact@v3
              with:
                  path: site/

            - name: Deploy to GitHub Pages
              id: deployment
              uses: actions/deploy-pages@v4

    docs-develop:
        name: Build and Deploy Development Documentation
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/develop' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        permissions:
            contents: read
            pages: write
            id-token: write
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup Python
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Setup Pages
              uses: actions/configure-pages@v5

            - name: Install Poetry
              uses: snok/install-poetry@v1
              with:
                  version: latest
                  virtualenvs-create: true
                  virtualenvs-in-project: true
                  installer-parallel: true

            - name: Install dependencies
              run: poetry install --no-interaction --with docs

            - name: Build development documentation
              run: |
                  poetry run mkdocs build --strict --verbose -f mkdocs.yml

            - name: Upload Pages artifact
              uses: actions/upload-pages-artifact@v3
              with:
                  path: site/

            - name: Deploy to GitHub Pages
              id: deployment
              uses: actions/deploy-pages@v4

    build-only:
        name: Build Documentation (PR/Test)
        runs-on: ubuntu-latest
        if: github.event_name == 'pull_request'
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup Python
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Install Poetry
              uses: snok/install-poetry@v1
              with:
                  version: latest
                  virtualenvs-create: true
                  virtualenvs-in-project: true
                  installer-parallel: true

            - name: Install dependencies
              run: poetry install --no-interaction --with docs

            - name: Test build main documentation
              run: |
                  poetry run mkdocs build --strict --verbose -f mkdocs.yml

            - name: Verify documentation structure
              run: |
                  echo "Checking documentation structure..."
                  if [ -f mkdocs.yml ]; then
                    echo "✅ mkdocs.yml found"
                  else
                    echo "❌ mkdocs.yml not found!"
                    exit 1
                  fi

                  if [ -d docs ]; then
                    echo "✅ docs directory found"
                    find docs -name "*.md" | head -10
                  else
                    echo "❌ docs directory not found!"
                    exit 1
                  fi

            - name: Upload build artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: documentation-build-${{ github.event.pull_request.head.sha || github.sha }}
                  path: site/
                  retention-days: 7

    lint-docs:
        name: Lint Documentation
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Python
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Install Poetry
              uses: snok/install-poetry@v1
              with:
                  version: latest
                  virtualenvs-create: true
                  virtualenvs-in-project: true
                  installer-parallel: true

            - name: Install dependencies
              run: poetry install --no-interaction --with docs

            - name: Check markdown links
              uses: gaurav-nelson/github-action-markdown-link-check@v1
              with:
                  use-quiet-mode: "yes"
                  use-verbose-mode: "yes"
                  config-file: ".github/markdown-link-check.json"
                  folder-path: "docs/"

            - name: Validate versions.json
              run: |
                  python -c "
                  import json
                  with open('docs/versions.json') as f:
                      data = json.load(f)

                  required_keys = {'versions', 'latest', 'development'}
                  if not all(key in data for key in required_keys):
                      raise ValueError('Missing required keys in versions.json')

                  for version in data['versions']:
                      required_version_keys = {'version', 'title', 'path', 'status'}
                      if not all(key in version for key in required_version_keys):
                          raise ValueError(f'Missing required keys in version: {version}')

                  print('✅ versions.json is valid')
                  "

            - name: Check documentation structure
              run: |
                  echo "✅ Documentation structure verified"
                  find docs -name "*.md" | wc -l | xargs echo "Markdown files found:"
                  ls -la mkdocs.yml
