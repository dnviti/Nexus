name: Documentation

on:
  push:
    branches: [develop]
    paths:
      - "docs/**"
      - "README.md"
      - "CONTRIBUTING.md"
      - "nexus/**"
      - "mkdocs*.yml"
      - ".github/workflows/docs.yml"
      - "scripts/docs/**"
    tags:
      - "v*.*.*"
  pull_request:
    branches: [main, develop]
    paths:
      - "docs/**"
      - "README.md"
      - "CONTRIBUTING.md"
      - "nexus/**"
      - "mkdocs*.yml"
      - ".github/workflows/docs.yml"
      - "scripts/docs/**"
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  docs-tag:
    name: Build and Deploy Tagged Version Documentation
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Building documentation for version: ${VERSION}"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Install dependencies
        run: poetry install --no-interaction --with docs

      - name: Create documentation version
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "Creating documentation for version: ${VERSION}"

          # Create version if it doesn't exist
          python scripts/docs/manage_versions.py create "${VERSION}" || echo "Version already exists"

          # Set as latest version
          python scripts/docs/manage_versions.py set-latest "${VERSION}"

      - name: Build tagged version documentation
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          poetry run mkdocs build --strict --verbose -f "mkdocs-${VERSION}.yml"

      - name: Download existing site (preserve other versions)
        continue-on-error: true
        run: |
          curl -s -L -o existing-site.tar.gz "https://github.com/${{ github.repository }}/releases/download/site-backup/site.tar.gz" || echo "No existing site backup found"
          if [ -f existing-site.tar.gz ]; then
            mkdir -p site-backup
            tar -xzf existing-site.tar.gz -C site-backup/ || echo "Failed to extract existing site"
          fi

      - name: Merge with existing site structure
        run: |
          # Create main site structure if it doesn't exist
          mkdir -p site

          # Copy existing versions if they exist
          if [ -d site-backup ]; then
            cp -r site-backup/* site/ || echo "No previous versions to merge"
          fi

          # Update main landing page
          cat > site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Nexus Platform Documentation</title>
              <meta name="description" content="The Ultimate Plugin-Based Application Platform - Choose your documentation version">
              <meta http-equiv="refresh" content="5; url=./${{ steps.version.outputs.version }}/">
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                      display: flex;
                      align-items: center;
                      justify-content: center;
                      height: 100vh;
                      margin: 0;
                      background: #f5f5f5;
                      text-align: center;
                  }
                  .container {
                      padding: 2rem;
                      background: white;
                      border-radius: 8px;
                      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                      max-width: 600px;
                  }
                  .logo {
                      font-size: 2rem;
                      font-weight: bold;
                      color: #1976d2;
                      margin-bottom: 1rem;
                  }
                  .version-card {
                      margin: 1rem 0;
                      padding: 1rem;
                      border: 1px solid #ddd;
                      border-radius: 4px;
                  }
                  .version-card a {
                      color: #1976d2;
                      text-decoration: none;
                      font-weight: 500;
                  }
                  .version-card a:hover {
                      text-decoration: underline;
                  }
                  .latest {
                      border-color: #1976d2;
                      background: #f3f8ff;
                  }
                  .dev {
                      border-color: #ff9800;
                      background: #fff8f0;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="logo">ðŸš€ Nexus Platform</div>
                  <h1>Documentation</h1>
                  <p>Redirecting to latest version (${{ steps.version.outputs.version }}) in 5 seconds...</p>

                  <div class="version-card latest">
                      <h3><a href="./${{ steps.version.outputs.version }}/">${{ steps.version.outputs.version }} (Latest)</a></h3>
                      <p>Latest stable release with all features and improvements.</p>
                  </div>

                  <div class="version-card dev">
                      <h3><a href="./dev/">Development Version</a></h3>
                      <p>Cutting-edge features and improvements. May contain experimental content.</p>
                  </div>

                  <hr style="margin: 2rem 0;">
                  <p><a href="https://github.com/dnviti/nexus-platform">GitHub Repository</a> |
                     <a href="https://github.com/dnviti/nexus-platform/issues">Issues</a></p>
              </div>
          </body>
          </html>
          EOF

      - name: Copy versions metadata
        run: |
          cp docs/versions.json site/

      - name: Create site backup for future builds
        run: |
          cd site
          tar -czf ../site-backup.tar.gz .

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  docs-develop:
    name: Build and Deploy Development Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Install dependencies
        run: poetry install --no-interaction --with docs

      - name: Build development documentation
        run: |
          poetry run mkdocs build --strict --verbose -f mkdocs-dev.yml

      - name: Download existing stable site
        continue-on-error: true
        run: |
          # Try to get the current deployed site to preserve stable versions
          curl -s -L -o current-site.tar.gz "https://github.com/${{ github.repository }}/releases/download/site-backup/site.tar.gz" || echo "No existing site found"
          if [ -f current-site.tar.gz ]; then
            mkdir -p current-site
            tar -xzf current-site.tar.gz -C current-site/ || echo "Failed to extract current site"
          fi

      - name: Create/update site structure for dev deployment
        run: |
          # Start with existing site or create minimal structure
          if [ -d current-site ]; then
            cp -r current-site/* site/ || mkdir -p site
          else
            mkdir -p site
          fi

          # The dev version is already built in site/dev by mkdocs
          # Just need to ensure the main index.html exists and works

          # Create or update landing page to include dev version
          cat > site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Nexus Platform Documentation</title>
              <meta name="description" content="The Ultimate Plugin-Based Application Platform - Choose your documentation version">
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                      display: flex;
                      align-items: center;
                      justify-content: center;
                      height: 100vh;
                      margin: 0;
                      background: #f5f5f5;
                      text-align: center;
                  }
                  .container {
                      padding: 2rem;
                      background: white;
                      border-radius: 8px;
                      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                      max-width: 600px;
                  }
                  .logo {
                      font-size: 2rem;
                      font-weight: bold;
                      color: #1976d2;
                      margin-bottom: 1rem;
                  }
                  .version-card {
                      margin: 1rem 0;
                      padding: 1rem;
                      border: 1px solid #ddd;
                      border-radius: 4px;
                  }
                  .version-card a {
                      color: #1976d2;
                      text-decoration: none;
                      font-weight: 500;
                  }
                  .version-card a:hover {
                      text-decoration: underline;
                  }
                  .latest {
                      border-color: #1976d2;
                      background: #f3f8ff;
                  }
                  .dev {
                      border-color: #ff9800;
                      background: #fff8f0;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="logo">ðŸš€ Nexus Platform</div>
                  <h1>Documentation</h1>
                  <p>Select a documentation version:</p>

                  <div class="version-card latest">
                      <h3><a href="./v0.1.0/">v0.1.0 (Latest Stable)</a></h3>
                      <p>Latest stable release with all features and improvements.</p>
                  </div>

                  <div class="version-card dev">
                      <h3><a href="./dev/">Development Version</a> ðŸš§</h3>
                      <p><strong>Updated!</strong> Cutting-edge features and improvements. May contain experimental content.</p>
                  </div>

                  <hr style="margin: 2rem 0;">
                  <p><a href="https://github.com/dnviti/nexus-platform">GitHub Repository</a> |
                     <a href="https://github.com/dnviti/nexus-platform/issues">Issues</a></p>
              </div>
          </body>
          </html>
          EOF

      - name: Copy versions metadata
        run: |
          cp docs/versions.json site/

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  build-only:
    name: Build Documentation (PR/Test)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Install dependencies
        run: poetry install --no-interaction --with docs

      - name: Test build development documentation
        run: |
          poetry run mkdocs build --strict --verbose -f mkdocs-dev.yml

      - name: Test build v0.1.0 documentation (if config exists)
        run: |
          if [ -f mkdocs-v0.1.0.yml ]; then
            poetry run mkdocs build --strict --verbose -f mkdocs-v0.1.0.yml
          else
            echo "v0.1.0 config not found, skipping"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation-build-${{ github.event.pull_request.head.sha || github.sha }}
          path: site/
          retention-days: 7

  lint-docs:
    name: Lint Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Install dependencies
        run: poetry install --no-interaction --with docs

      - name: Check markdown links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: "yes"
          use-verbose-mode: "yes"
          config-file: ".github/markdown-link-check.json"
          folder-path: "docs/"

      - name: Validate versions.json
        run: |
          python -c "
          import json
          with open('docs/versions.json') as f:
              data = json.load(f)

          required_keys = {'versions', 'latest', 'development'}
          if not all(key in data for key in required_keys):
              raise ValueError('Missing required keys in versions.json')

          for version in data['versions']:
              required_version_keys = {'version', 'title', 'path', 'status'}
              if not all(key in version for key in required_version_keys):
                  raise ValueError(f'Missing required keys in version: {version}')

          print('âœ… versions.json is valid')
          "

      - name: Check documentation structure
        run: |
          python scripts/docs/manage_versions.py list
