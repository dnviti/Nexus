name: Documentation

on:
  push:
    branches: [main, develop]
    paths:
      - "docs/**"
      - "README.md"
      - "CONTRIBUTING.md"
      - "nexus/**"
      - "mkdocs*.yml"
      - ".github/workflows/docs.yml"
      - "scripts/docs/**"
  pull_request:
    branches: [main, develop]
    paths:
      - "docs/**"
      - "README.md"
      - "CONTRIBUTING.md"
      - "nexus/**"
      - "mkdocs*.yml"
      - ".github/workflows/docs.yml"
      - "scripts/docs/**"
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  docs-main:
    name: Build and Deploy Documentation (Main Branch)
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Install dependencies
        run: poetry install --no-interaction --with docs

      - name: Build v2.0.0 documentation
        run: |
          poetry run mkdocs build --strict --verbose -f mkdocs-v2.0.0.yml

      - name: Create main site structure
        run: |
          mkdir -p site
          # Create a simple index.html that redirects to latest version
          cat > site/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <meta charset="utf-8">
              <title>Nexus Platform Documentation</title>
              <meta http-equiv="refresh" content="0; url=./v2.0.0/">
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                      display: flex;
                      align-items: center;
                      justify-content: center;
                      height: 100vh;
                      margin: 0;
                      background: #f5f5f5;
                  }
                  .container {
                      text-align: center;
                      padding: 2rem;
                      background: white;
                      border-radius: 8px;
                      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                  }
                  .logo {
                      font-size: 2rem;
                      font-weight: bold;
                      color: #1976d2;
                      margin-bottom: 1rem;
                  }
                  .spinner {
                      width: 40px;
                      height: 40px;
                      border: 4px solid #f3f3f3;
                      border-top: 4px solid #1976d2;
                      border-radius: 50%;
                      animation: spin 1s linear infinite;
                      margin: 1rem auto;
                  }
                  @keyframes spin {
                      0% { transform: rotate(0deg); }
                      100% { transform: rotate(360deg); }
                  }
                  a {
                      color: #1976d2;
                      text-decoration: none;
                  }
                  a:hover {
                      text-decoration: underline;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="logo">ðŸš€ Nexus Platform</div>
                  <div class="spinner"></div>
                  <p>Redirecting to documentation...</p>
                  <p><a href="./v2.0.0/">Click here if you are not redirected automatically</a></p>
                  <hr style="margin: 2rem 0;">
                  <h3>Available Versions:</h3>
                  <p><a href="./v2.0.0/">v2.0.0 (Latest)</a></p>
                  <p><a href="./dev/">Development Version</a></p>
              </div>
          </body>
          </html>
          EOF

      - name: Copy versions metadata
        run: |
          cp docs/versions.json site/

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  docs-develop:
    name: Build and Deploy Development Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Install dependencies
        run: poetry install --no-interaction --with docs

      - name: Build development documentation
        run: |
          poetry run mkdocs build --strict --verbose -f mkdocs-dev.yml

      - name: Download existing site
        continue-on-error: true
        run: |
          # Try to download the existing site to preserve other versions
          curl -s -o site.tar.gz "https://dnviti.github.io/nexus-platform/site.tar.gz" || echo "No existing site found"
          if [ -f site.tar.gz ]; then
            tar -xzf site.tar.gz || echo "Failed to extract existing site"
          fi

      - name: Create/update site structure
        run: |
          # Ensure site directory exists
          mkdir -p site

          # If no main site exists, create minimal structure
          if [ ! -f site/index.html ]; then
            cat > site/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <meta charset="utf-8">
              <title>Nexus Platform Documentation</title>
              <meta http-equiv="refresh" content="0; url=./v2.0.0/">
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                      display: flex;
                      align-items: center;
                      justify-content: center;
                      height: 100vh;
                      margin: 0;
                      background: #f5f5f5;
                  }
                  .container {
                      text-align: center;
                      padding: 2rem;
                      background: white;
                      border-radius: 8px;
                      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                  }
                  .logo {
                      font-size: 2rem;
                      font-weight: bold;
                      color: #1976d2;
                      margin-bottom: 1rem;
                  }
                  .spinner {
                      width: 40px;
                      height: 40px;
                      border: 4px solid #f3f3f3;
                      border-top: 4px solid #1976d2;
                      border-radius: 50%;
                      animation: spin 1s linear infinite;
                      margin: 1rem auto;
                  }
                  @keyframes spin {
                      0% { transform: rotate(0deg); }
                      100% { transform: rotate(360deg); }
                  }
                  a {
                      color: #1976d2;
                      text-decoration: none;
                  }
                  a:hover {
                      text-decoration: underline;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="logo">ðŸš€ Nexus Platform</div>
                  <div class="spinner"></div>
                  <p>Redirecting to documentation...</p>
                  <p><a href="./v2.0.0/">Click here if you are not redirected automatically</a></p>
                  <hr style="margin: 2rem 0;">
                  <h3>Available Versions:</h3>
                  <p><a href="./v2.0.0/">v2.0.0 (Latest)</a></p>
                  <p><a href="./dev/">Development Version</a></p>
              </div>
          </body>
          </html>
          EOF
          fi

      - name: Copy versions metadata
        run: |
          cp docs/versions.json site/

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  build-only:
    name: Build Documentation (PR/Test)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Install dependencies
        run: poetry install --no-interaction --with docs

      - name: Test build v2.0.0 documentation
        run: |
          poetry run mkdocs build --strict --verbose -f mkdocs-v2.0.0.yml

      - name: Test build development documentation
        run: |
          poetry run mkdocs build --strict --verbose -f mkdocs-dev.yml

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation-build-${{ github.event.pull_request.head.sha || github.sha }}
          path: site/
          retention-days: 7

  lint-docs:
    name: Lint Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Install dependencies
        run: poetry install --no-interaction --with docs

      - name: Check markdown links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: "yes"
          use-verbose-mode: "yes"
          config-file: ".github/markdown-link-check.json"
          folder-path: "docs/"

      - name: Validate versions.json
        run: |
          python -c "
          import json
          with open('docs/versions.json') as f:
              data = json.load(f)

          required_keys = {'versions', 'latest', 'development'}
          if not all(key in data for key in required_keys):
              raise ValueError('Missing required keys in versions.json')

          for version in data['versions']:
              required_version_keys = {'version', 'title', 'path', 'status'}
              if not all(key in version for key in required_version_keys):
                  raise ValueError(f'Missing required keys in version: {version}')

          print('âœ… versions.json is valid')
          "

      - name: Check documentation structure
        run: |
          python scripts/docs/manage_versions.py list
